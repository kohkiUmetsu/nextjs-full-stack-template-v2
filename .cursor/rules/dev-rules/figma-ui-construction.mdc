---
description: 
globs: 
alwaysApply: false
---
# Figma画像からのUI構築ルール

## 概要
Figmaから出力した画面の画像からUIコンポーネントを構築する際の厳格なルールです。

## 重要な原則
**画像の完全再現**: 画像と完全一致するようにコンポーネントを作成し、色やデザインを補完・推測・改善してはいけません。

## カラーパレット利用規則

### 1. 必須カラー変数の使用
色は必ずglobal.cssで定義された以下のtheme変数を使用してください。無ければglobal.cssのthemeに追加して使用してください：

#### プロジェクト固有色
- `primary-color`: #f5ee31 (メインカラー)
- `accent-color`: #0077ff (アクセントカラー)  
- `gray-color`: #d9d9d9 (グレー系)

#### UIシステム色
- `background`, `foreground` (基本の背景・文字色)
- `card`, `card-foreground` (カード系)
- `primary`, `primary-foreground` (プライマリボタン等)
- `secondary`, `secondary-foreground` (セカンダリ要素)
- `muted`, `muted-foreground` (控えめな要素)
- `accent`, `accent-foreground` (アクセント要素)
- `border`, `input`, `ring` (境界線、入力欄等)

#### 使用方法
```css
/* Tailwind CSSクラスで使用 */
bg-primary-color text-accent-color border-gray-color

/* カスタムCSSで使用 */
background-color: var(--color-primary-color);
color: var(--color-accent-color);
```

### 2. 色指定の禁止事項
- HEXコード（#000000等）の直接記述禁止
- rgbやhsl値の直接記述禁止
- Tailwindの色名（red-500、blue-300等）の使用禁止
- 画像から読み取った色の推測による補完禁止

## スペーシング・レイアウト規則

### 1. 精密なスペーシング測定
- 画像から正確にpadding、margin、gapを測定
- Tailwindのスペーシングスケールに最も近い値を使用
- 必要に応じてカスタムCSS値（px指定）を使用

### 2. レスポンシブ対応
- 画像サイズに応じた適切なブレイクポイントを設定
- モバイル・タブレット・デスクトップでの表示崩れを防止

## 既存コンポーネント活用規則

### 1. 類似デザインの検索・活用
画像のUI要素に類似するものがないか以下を確認：

#### 既存UIコンポーネント
- `/components/ui/` ディレクトリ内のコンポーネント
- `/components/` ディレクトリ内のカスタムコンポーネント
- `*/page.tsx` ディレクトリ内の類似デザイン

#### 確認すべき既存パターン
- ボタンスタイル（`button.tsx`の variants）
- カードレイアウト（`card.tsx`の構造）
- フォーム要素（`input.tsx`, `textarea.tsx` 等）
- ダイアログ・モーダル（`dialog/` 内）

### 2. 既存パターンとの統一
- 同様のデザインが存在する場合は既存のクラス名・構造を踏襲
- 新規作成時も既存コンポーネントの命名規則・パターンに従う

## 実装手順

### ステップ1: 分析
1. 画像の各要素を詳細に分析
2. 既存コンポーネントとの類似性を確認
3. 必要な色・スペーシング・レイアウトを特定

### ステップ2: 色の確認
1. 画像から読み取った色がtheme変数に対応するかチェック
2. 対応する変数が見つからない場合は最も近いものを選択
3. 完全に一致しない場合でも推測での補完は禁止

### ステップ3: 実装
1. 既存パターンがある場合はそれをベースに実装
2. スペーシングは画像から正確に測定した値を使用
3. レスポンシブ対応を考慮したクラス設計

### ステップ4: 検証
1. 画像との完全一致を確認
2. 他の画面・コンポーネントとの整合性を確認
3. レスポンシブ動作の確認

## 避けるべき行為

### 1. 色に関する推測・補完
- 「より良い色」への変更
- 「似た色」での代用
- アクセシビリティを理由とした色の変更

### 2. デザインの「改善」
- 余白の調整（画像と異なる場合）
- フォントサイズの変更
- 影やエフェクトの追加・削除

### 3. 未確認の実装
- 既存コンポーネントの確認不足
- theme変数の確認不足
- 画像との差異を許容した実装

## 例外ケース

### 1. アクセシビリティ対応
コントラスト比等でWCAG基準を満たさない場合のみ、事前に確認を取って調整

### 2. 技術的制約
- CSSで実現不可能なデザインの場合
- パフォーマンス上の問題がある場合

上記の場合も、事前にチーム・プロジェクトオーナーと相談・承認を得ること。

## コード例

### 良い例
```tsx
// 既存のボタンvariantを活用
<Button variant="accent" size="lg" className="px-8 py-4">
  送信する
</Button>

// theme変数を使用したカスタムスタイル
<div className="bg-primary-color text-foreground p-6 rounded-lg">
  Content
</div>
```

### 悪い例
```tsx
// HEXコードの直接指定（禁止）
<div className="bg-[#f5ee31] text-[#333333]">Content</div>

// Tailwind色名の使用（禁止）
<div className="bg-yellow-300 text-gray-700">Content</div>

// 推測による色の変更（禁止）
// 画像が#f5ee31だが「より良い」として#f6ef32に変更
```

このルールに従って、Figma画像から正確で一貫性のあるUIコンポーネントを構築してください。
